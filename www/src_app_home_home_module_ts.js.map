{"version":3,"file":"src_app_home_home_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAChB;AAEvC,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,gDAAQ;KACpB;CACF,CAAC;IAMW,qBAAqB,SAArB,qBAAqB;;AAArB,qBAAqB;IAJjC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,qBAAqB;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACfO;AACM;AACF;AACA;AACN;AAEuB;IAYjD,cAAc,SAAd,cAAc;;AAAd,cAAc;IAT1B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,uEAAqB;SACtB;QACD,YAAY,EAAE,CAAC,gDAAQ,CAAC;KACzB,CAAC;GACW,cAAc;AAAA;;;;;;;;;;;;;;;;;;;;;;;AClBe;AACkB;IAO/C,QAAQ,SAAR,QAAQ;IAInB,YAAoB,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;IAAG,CAAC;IAE7C,QAAQ;QACN,WAAW,CAAC,GAAG,EAAE;YACf,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC7C,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;gBAC9B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3B,CAAC,CAAC;QACJ,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;;;;;AAdU,QAAQ;IALpB,wDAAS,CAAC;QACT,QAAQ,EAAE,UAAU;QACpB,iEAA6B;;KAE9B,CAAC;GACW,QAAQ;AAAA;;;;;;;;;;;;;;;;;;;;;ACRsB;AAEoB;AACzB;AACW;IAKpC,aAAa,SAAb,aAAa;IAQxB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAN1C,aAAQ,GAAG,4BAA4B,CAAC;QAExC,gBAAW,GAAG;YACZ,OAAO,EAAE,IAAI,6DAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAC,CAAC;SAChE,CAAC;IAE4C,CAAC;IAE/C,SAAS;QACP,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;aACvD,IAAI,CACH,0DAAU,CAAC,IAAI,CAAC,WAAW,CAAM,OAAO,CAAC,CAAC,CAC3C;IACL,CAAC;IAGO,WAAW,CAAI,SAAS,GAAG,WAAW,EAAE,MAAU;QACxD,OAAO,CAAC,KAAU,EAAiB,EAAE;YACnC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,YAAY,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACrD,OAAO,wCAAE,CAAC,MAAW,CAAC,CAAC;QACzB,CAAC,CAAC;IACJ,CAAC;;;;;AAzBU,aAAa;IAHzB,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,aAAa;AAAA","sources":["./src/app/home/home-routing.module.ts","./src/app/home/home.module.ts","./src/app/home/home.page.ts","./src/app/services/api-svc.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomePage } from './home.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomePage,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { HomePage } from './home.page';\n\nimport { HomePageRoutingModule } from './home-routing.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    HomePageRoutingModule\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n","import { Component } from '@angular/core';\nimport { ApiSvcService } from '../services/api-svc.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage {\n\n  status: any;\n\n  constructor(private apiSvc: ApiSvcService) {}\n\n  ngOnInit() {\n    setInterval(() => {\n      console.log('test')\n      this.apiSvc.getStatus().subscribe((response) => {\n        this.status = response.status;\n        console.log(this.status);\n      })\n    }, 2000)\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiSvcService {\n\n  endpoint = 'http://192.168.163.225/api';\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json'})\n  };\n\n  constructor(private httpClient: HttpClient) { }\n\n  getStatus(): Observable<any> {\n    console.log('try to get')\n    return this.httpClient.get<any>(this.endpoint + '/status')\n      .pipe(\n        catchError(this.handleError<any>('error'))\n      )\n  }\n\n  \n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      console.log(`${operation} failed: ${error.message}`);\n      return of(result as T);\n    };\n  }  \n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}